# A solution in livescript (a language that transpiles to javascript)
#
# You can run it from your browser. 
# 1. Go to livescript.net
# 2. Then copy and past this file to the text box in the top right corner
# 3. Press 'run'
# 4. Open the developer console to see the output
#     - Use ctrl-shift-i in chrome
#
# You can download the REPL for livescript if you prefer but you need NPM & Node

#############
# Hash table based answer:
#
# The function h takes a string and returns a map where the values represent the
# number of the key occurs in the string. For example:
# (h "Hello") == { "H": 1, "e": 1, "l": 2, "o": 1}
#
# The function permutations checks if two strings are permutations of each other
# by comparing maps generated by h.
#############

h = (a) --> let o = {}:
  a / "" |> map (x) -> o[x] = (o[x] || 0) + 1
permutations = (a,b) --> (h a) === (h b)

# Prints some test cases to the console 
console.log(permutations "abc", "cab")
console.log(permutations "abc", "ccab")
console.log(permutations "abc", "CA B")
# The next one prints true for some reason, apparently it's not case sensitive
console.log(permutations "abc", "CAB")
console.log(permutations "abc", "abc")

#############
# Sorting based answer:
#
# The function permutations checks if two strings are permutations by sorting
# them and comparing sorted strings.
#
# This one has better names for variables
#############

# Converts a string to an array of characters
# It's equivalent to (a) -> a.split("")
toArray = (a) -> (a / "")

# Sorts a String
permutations = (str1, str2) --> 
  ((toArray str1) |> sort) === ((toArray str2) |> sort)

console.log(permutations "abc", "cab")
console.log(permutations "abc", "ccab")
console.log(permutations "abc", "CAB")
console.log(permutations "abc", "abc")